{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const initialBoard=Array(9).fill(null).map(()=>Array(9).fill(null));const initialStatus=Array(9).fill(null);// Для отслеживания побед в больших клетках\nfunction SuperTicTacToe(){const[board,setBoard]=useState(initialBoard);const[currentPlayer,setCurrentPlayer]=useState('X');const[nextMove,setNextMove]=useState(null);// Следующая под-сетка для хода противника\nconst[status,setStatus]=useState(initialStatus);// Состояние клеток большой сетки\nconst[gameOver,setGameOver]=useState(false);// Состояние завершения игры\nuseEffect(()=>{// Если следующая мини-сетка заблокирована, игрок может выбрать любую доступную сетку\nif(nextMove!==null&&status[nextMove]!==null){// Если подсетка заблокирована, выбираем любую незаблокированную\nconst availableMoves=status.map((s,idx)=>s===null?idx:null).filter(idx=>idx!==null);setNextMove(availableMoves.length>0?availableMoves[0]:null);// Выбираем первую доступную под-сетку\n}},[nextMove,status]);const checkWinner=subBoard=>{// Проверяем победителя на под-сетке\nfor(let i=0;i<3;i++){// Проверка строк\nif(subBoard[i*3]&&subBoard[i*3]===subBoard[i*3+1]&&subBoard[i*3]===subBoard[i*3+2]){return subBoard[i*3];}// Проверка столбцов\nif(subBoard[i]&&subBoard[i]===subBoard[i+3]&&subBoard[i]===subBoard[i+6]){return subBoard[i];}}// Проверка диагоналей\nif(subBoard[0]&&subBoard[0]===subBoard[4]&&subBoard[0]===subBoard[8]){return subBoard[0];}if(subBoard[2]&&subBoard[2]===subBoard[4]&&subBoard[2]===subBoard[6]){return subBoard[2];}return null;};const checkGameOver=()=>{// Проверяем победу на большой сетке\nfor(let i=0;i<3;i++){// Проверка строк\nif(status[i*3]&&status[i*3]===status[i*3+1]&&status[i*3]===status[i*3+2]){return status[i*3];// Возвращаем победителя (X или O)\n}// Проверка столбцов\nif(status[i]&&status[i]===status[i+3]&&status[i]===status[i+6]){return status[i];// Возвращаем победителя (X или O)\n}}// Проверка диагоналей\nif(status[0]&&status[0]===status[4]&&status[0]===status[8]){return status[0];// Возвращаем победителя (X или O)\n}if(status[2]&&status[2]===status[4]&&status[2]===status[6]){return status[2];// Возвращаем победителя (X или O)\n}return null;};const handleCellClick=(index,subIndex)=>{// Если игра завершена, не разрешаем делать ход\nif(gameOver||board[index][subIndex]||nextMove!==null&&nextMove!==index||status[index]!==null)return;const newBoard=[...board];newBoard[index][subIndex]=currentPlayer;setBoard(newBoard);// Проверяем победу на под-сетке\nconst winner=checkWinner(newBoard[index]);if(winner){const newStatus=[...status];newStatus[index]=winner;// Помечаем победителя в клетке большой сетки\nsetStatus(newStatus);}// Определяем следующую под-сетку для хода противника\nsetNextMove(subIndex===8?null:subIndex);// Меняем игрока\nsetCurrentPlayer(currentPlayer==='X'?'O':'X');// Проверка на завершение игры\nconst gameWinner=checkGameOver();if(gameWinner){setGameOver(true);alert(`${gameWinner} wins the game!`);}};const renderCell=(index,subIndex)=>{return/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCellClick(index,subIndex),className:`cell ${board[index][subIndex]?board[index][subIndex]:''} ${status[index]!==null?'disabled':''}`,children:board[index][subIndex]},subIndex);};const renderBoard=()=>{return board.map((subBoard,index)=>/*#__PURE__*/_jsx(\"div\",{className:`sub-board ${nextMove===index&&status[index]===null?'active':''} ${status[index]?status[index]:''}`,children:subBoard.map((_,subIndex)=>renderCell(index,subIndex))},index));};return/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Super Tic-Tac-Toe\"}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:renderBoard()}),/*#__PURE__*/_jsxs(\"div\",{className:\"current-player\",children:[\"Current Player: \",currentPlayer]})]});}export default SuperTicTacToe;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","initialBoard","Array","fill","map","initialStatus","SuperTicTacToe","board","setBoard","currentPlayer","setCurrentPlayer","nextMove","setNextMove","status","setStatus","gameOver","setGameOver","availableMoves","s","idx","filter","length","checkWinner","subBoard","i","checkGameOver","handleCellClick","index","subIndex","newBoard","winner","newStatus","gameWinner","alert","renderCell","onClick","className","children","renderBoard","_"],"sources":["C:/Users/User/Desktop/portfol/portfol/src/Pages/SuperTicTacToe.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst initialBoard = Array(9).fill(null).map(() => Array(9).fill(null));\r\nconst initialStatus = Array(9).fill(null); // Для отслеживания побед в больших клетках\r\n\r\nfunction SuperTicTacToe() {\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [currentPlayer, setCurrentPlayer] = useState('X');\r\n  const [nextMove, setNextMove] = useState(null); // Следующая под-сетка для хода противника\r\n  const [status, setStatus] = useState(initialStatus); // Состояние клеток большой сетки\r\n  const [gameOver, setGameOver] = useState(false); // Состояние завершения игры\r\n\r\n  useEffect(() => {\r\n    // Если следующая мини-сетка заблокирована, игрок может выбрать любую доступную сетку\r\n    if (nextMove !== null && status[nextMove] !== null) {\r\n      // Если подсетка заблокирована, выбираем любую незаблокированную\r\n      const availableMoves = status.map((s, idx) => (s === null ? idx : null)).filter((idx) => idx !== null);\r\n      setNextMove(availableMoves.length > 0 ? availableMoves[0] : null); // Выбираем первую доступную под-сетку\r\n    }\r\n  }, [nextMove, status]);\r\n\r\n  const checkWinner = (subBoard) => {\r\n    // Проверяем победителя на под-сетке\r\n    for (let i = 0; i < 3; i++) {\r\n      // Проверка строк\r\n      if (subBoard[i * 3] && subBoard[i * 3] === subBoard[i * 3 + 1] && subBoard[i * 3] === subBoard[i * 3 + 2]) {\r\n        return subBoard[i * 3];\r\n      }\r\n      // Проверка столбцов\r\n      if (subBoard[i] && subBoard[i] === subBoard[i + 3] && subBoard[i] === subBoard[i + 6]) {\r\n        return subBoard[i];\r\n      }\r\n    }\r\n    // Проверка диагоналей\r\n    if (subBoard[0] && subBoard[0] === subBoard[4] && subBoard[0] === subBoard[8]) {\r\n      return subBoard[0];\r\n    }\r\n    if (subBoard[2] && subBoard[2] === subBoard[4] && subBoard[2] === subBoard[6]) {\r\n      return subBoard[2];\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    // Проверяем победу на большой сетке\r\n    for (let i = 0; i < 3; i++) {\r\n      // Проверка строк\r\n      if (status[i * 3] && status[i * 3] === status[i * 3 + 1] && status[i * 3] === status[i * 3 + 2]) {\r\n        return status[i * 3]; // Возвращаем победителя (X или O)\r\n      }\r\n      // Проверка столбцов\r\n      if (status[i] && status[i] === status[i + 3] && status[i] === status[i + 6]) {\r\n        return status[i]; // Возвращаем победителя (X или O)\r\n      }\r\n    }\r\n    // Проверка диагоналей\r\n    if (status[0] && status[0] === status[4] && status[0] === status[8]) {\r\n      return status[0]; // Возвращаем победителя (X или O)\r\n    }\r\n    if (status[2] && status[2] === status[4] && status[2] === status[6]) {\r\n      return status[2]; // Возвращаем победителя (X или O)\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleCellClick = (index, subIndex) => {\r\n    // Если игра завершена, не разрешаем делать ход\r\n    if (gameOver || board[index][subIndex] || (nextMove !== null && nextMove !== index) || status[index] !== null) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index][subIndex] = currentPlayer;\r\n    setBoard(newBoard);\r\n\r\n    // Проверяем победу на под-сетке\r\n    const winner = checkWinner(newBoard[index]);\r\n    if (winner) {\r\n      const newStatus = [...status];\r\n      newStatus[index] = winner; // Помечаем победителя в клетке большой сетки\r\n      setStatus(newStatus);\r\n    }\r\n\r\n    // Определяем следующую под-сетку для хода противника\r\n    setNextMove(subIndex === 8 ? null : subIndex);\r\n\r\n    // Меняем игрока\r\n    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\r\n    \r\n    // Проверка на завершение игры\r\n    const gameWinner = checkGameOver();\r\n    if (gameWinner) {\r\n      setGameOver(true);\r\n      alert(`${gameWinner} wins the game!`);\r\n    }\r\n  };\r\n\r\n  const renderCell = (index, subIndex) => {\r\n    return (\r\n      <button\r\n        key={subIndex}\r\n        onClick={() => handleCellClick(index, subIndex)}\r\n        className={`cell ${board[index][subIndex] ? board[index][subIndex] : ''} ${status[index] !== null ? 'disabled' : ''}`}\r\n      >\r\n        {board[index][subIndex]}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const renderBoard = () => {\r\n    return board.map((subBoard, index) => (\r\n      <div\r\n        key={index}\r\n        className={`sub-board ${nextMove === index && status[index] === null ? 'active' : ''} ${status[index] ? status[index] : ''}`}\r\n      >\r\n        {subBoard.map((_, subIndex) => renderCell(index, subIndex))}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h1 className=\"title\">Super Tic-Tac-Toe</h1>\r\n      <div className=\"board\">\r\n        {renderBoard()}\r\n      </div>\r\n      <div className=\"current-player\">Current Player: {currentPlayer}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SuperTicTacToe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}