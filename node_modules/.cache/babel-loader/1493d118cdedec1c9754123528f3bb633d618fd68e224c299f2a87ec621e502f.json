{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\portfol\\\\portfol\\\\src\\\\Pages\\\\SuperTicTacToe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = Array(9).fill(null).map(() => Array(9).fill(null));\nconst initialStatus = Array(9).fill(null); // Для отслеживания побед в больших клетках\n\nfunction SuperTicTacToe() {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [currentPlayer, setCurrentPlayer] = useState('X');\n  const [nextMove, setNextMove] = useState(null); // Следующая под-сетка для хода противника\n  const [status, setStatus] = useState(initialStatus); // Состояние клеток большой сетки\n  const [gameOver, setGameOver] = useState(false); // Состояние завершения игры\n\n  useEffect(() => {\n    // Если следующая мини-сетка заблокирована, игрок может выбрать любую доступную сетку\n    if (nextMove !== null && status[nextMove] !== null) {\n      // Если подсетка заблокирована, выбираем любую незаблокированную\n      const availableMoves = status.map((s, idx) => s === null ? idx : null).filter(idx => idx !== null);\n      setNextMove(availableMoves.length > 0 ? availableMoves[0] : null); // Выбираем первую доступную под-сетку\n    }\n  }, [nextMove, status]);\n  const checkWinner = subBoard => {\n    // Проверяем победителя на под-сетке\n    for (let i = 0; i < 3; i++) {\n      // Проверка строк\n      if (subBoard[i * 3] && subBoard[i * 3] === subBoard[i * 3 + 1] && subBoard[i * 3] === subBoard[i * 3 + 2]) {\n        return subBoard[i * 3];\n      }\n      // Проверка столбцов\n      if (subBoard[i] && subBoard[i] === subBoard[i + 3] && subBoard[i] === subBoard[i + 6]) {\n        return subBoard[i];\n      }\n    }\n    // Проверка диагоналей\n    if (subBoard[0] && subBoard[0] === subBoard[4] && subBoard[0] === subBoard[8]) {\n      return subBoard[0];\n    }\n    if (subBoard[2] && subBoard[2] === subBoard[4] && subBoard[2] === subBoard[6]) {\n      return subBoard[2];\n    }\n    return null;\n  };\n  const checkGameOver = () => {\n    // Проверяем победу на большой сетке\n    for (let i = 0; i < 3; i++) {\n      // Проверка строк\n      if (status[i * 3] && status[i * 3] === status[i * 3 + 1] && status[i * 3] === status[i * 3 + 2]) {\n        return status[i * 3]; // Возвращаем победителя (X или O)\n      }\n      // Проверка столбцов\n      if (status[i] && status[i] === status[i + 3] && status[i] === status[i + 6]) {\n        return status[i]; // Возвращаем победителя (X или O)\n      }\n    }\n    // Проверка диагоналей\n    if (status[0] && status[0] === status[4] && status[0] === status[8]) {\n      return status[0]; // Возвращаем победителя (X или O)\n    }\n    if (status[2] && status[2] === status[4] && status[2] === status[6]) {\n      return status[2]; // Возвращаем победителя (X или O)\n    }\n    return null;\n  };\n  const handleCellClick = (index, subIndex) => {\n    // Если игра завершена, не разрешаем делать ход\n    if (gameOver || board[index][subIndex] || nextMove !== null && nextMove !== index || status[index] !== null) return;\n    const newBoard = [...board];\n    newBoard[index][subIndex] = currentPlayer;\n    setBoard(newBoard);\n\n    // Проверяем победу на под-сетке\n    const winner = checkWinner(newBoard[index]);\n    if (winner) {\n      const newStatus = [...status];\n      newStatus[index] = winner; // Помечаем победителя в клетке большой сетки\n      setStatus(newStatus);\n    }\n\n    // Определяем следующую под-сетку для хода противника\n    setNextMove(subIndex === 8 ? null : subIndex);\n\n    // Меняем игрока\n    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\n\n    // Проверка на завершение игры\n    const gameWinner = checkGameOver();\n    if (gameWinner) {\n      setGameOver(true);\n      alert(`${gameWinner} wins the game!`);\n    }\n  };\n  const renderCell = (index, subIndex) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleCellClick(index, subIndex),\n      className: `cell ${board[index][subIndex] ? board[index][subIndex] : ''} ${status[index] !== null ? 'disabled' : ''}`,\n      children: board[index][subIndex]\n    }, subIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  };\n  const renderBoard = () => {\n    return board.map((subBoard, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sub-board ${nextMove === index && status[index] === null ? 'active' : ''} ${status[index] ? status[index] : ''}`,\n      children: subBoard.map((_, subIndex) => renderCell(index, subIndex))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Super Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-player\",\n      children: [\"Current Player: \", currentPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(SuperTicTacToe, \"oUS6Qsbs2ePB7Yl5U4tNHobuaMY=\");\n_c = SuperTicTacToe;\nexport default SuperTicTacToe;\nvar _c;\n$RefreshReg$(_c, \"SuperTicTacToe\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","initialBoard","Array","fill","map","initialStatus","SuperTicTacToe","_s","board","setBoard","currentPlayer","setCurrentPlayer","nextMove","setNextMove","status","setStatus","gameOver","setGameOver","availableMoves","s","idx","filter","length","checkWinner","subBoard","i","checkGameOver","handleCellClick","index","subIndex","newBoard","winner","newStatus","gameWinner","alert","renderCell","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderBoard","_","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/portfol/portfol/src/Pages/SuperTicTacToe.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst initialBoard = Array(9).fill(null).map(() => Array(9).fill(null));\r\nconst initialStatus = Array(9).fill(null); // Для отслеживания побед в больших клетках\r\n\r\nfunction SuperTicTacToe() {\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [currentPlayer, setCurrentPlayer] = useState('X');\r\n  const [nextMove, setNextMove] = useState(null); // Следующая под-сетка для хода противника\r\n  const [status, setStatus] = useState(initialStatus); // Состояние клеток большой сетки\r\n  const [gameOver, setGameOver] = useState(false); // Состояние завершения игры\r\n\r\n  useEffect(() => {\r\n    // Если следующая мини-сетка заблокирована, игрок может выбрать любую доступную сетку\r\n    if (nextMove !== null && status[nextMove] !== null) {\r\n      // Если подсетка заблокирована, выбираем любую незаблокированную\r\n      const availableMoves = status.map((s, idx) => (s === null ? idx : null)).filter((idx) => idx !== null);\r\n      setNextMove(availableMoves.length > 0 ? availableMoves[0] : null); // Выбираем первую доступную под-сетку\r\n    }\r\n  }, [nextMove, status]);\r\n\r\n  const checkWinner = (subBoard) => {\r\n    // Проверяем победителя на под-сетке\r\n    for (let i = 0; i < 3; i++) {\r\n      // Проверка строк\r\n      if (subBoard[i * 3] && subBoard[i * 3] === subBoard[i * 3 + 1] && subBoard[i * 3] === subBoard[i * 3 + 2]) {\r\n        return subBoard[i * 3];\r\n      }\r\n      // Проверка столбцов\r\n      if (subBoard[i] && subBoard[i] === subBoard[i + 3] && subBoard[i] === subBoard[i + 6]) {\r\n        return subBoard[i];\r\n      }\r\n    }\r\n    // Проверка диагоналей\r\n    if (subBoard[0] && subBoard[0] === subBoard[4] && subBoard[0] === subBoard[8]) {\r\n      return subBoard[0];\r\n    }\r\n    if (subBoard[2] && subBoard[2] === subBoard[4] && subBoard[2] === subBoard[6]) {\r\n      return subBoard[2];\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const checkGameOver = () => {\r\n    // Проверяем победу на большой сетке\r\n    for (let i = 0; i < 3; i++) {\r\n      // Проверка строк\r\n      if (status[i * 3] && status[i * 3] === status[i * 3 + 1] && status[i * 3] === status[i * 3 + 2]) {\r\n        return status[i * 3]; // Возвращаем победителя (X или O)\r\n      }\r\n      // Проверка столбцов\r\n      if (status[i] && status[i] === status[i + 3] && status[i] === status[i + 6]) {\r\n        return status[i]; // Возвращаем победителя (X или O)\r\n      }\r\n    }\r\n    // Проверка диагоналей\r\n    if (status[0] && status[0] === status[4] && status[0] === status[8]) {\r\n      return status[0]; // Возвращаем победителя (X или O)\r\n    }\r\n    if (status[2] && status[2] === status[4] && status[2] === status[6]) {\r\n      return status[2]; // Возвращаем победителя (X или O)\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleCellClick = (index, subIndex) => {\r\n    // Если игра завершена, не разрешаем делать ход\r\n    if (gameOver || board[index][subIndex] || (nextMove !== null && nextMove !== index) || status[index] !== null) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index][subIndex] = currentPlayer;\r\n    setBoard(newBoard);\r\n\r\n    // Проверяем победу на под-сетке\r\n    const winner = checkWinner(newBoard[index]);\r\n    if (winner) {\r\n      const newStatus = [...status];\r\n      newStatus[index] = winner; // Помечаем победителя в клетке большой сетки\r\n      setStatus(newStatus);\r\n    }\r\n\r\n    // Определяем следующую под-сетку для хода противника\r\n    setNextMove(subIndex === 8 ? null : subIndex);\r\n\r\n    // Меняем игрока\r\n    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\r\n    \r\n    // Проверка на завершение игры\r\n    const gameWinner = checkGameOver();\r\n    if (gameWinner) {\r\n      setGameOver(true);\r\n      alert(`${gameWinner} wins the game!`);\r\n    }\r\n  };\r\n\r\n  const renderCell = (index, subIndex) => {\r\n    return (\r\n      <button\r\n        key={subIndex}\r\n        onClick={() => handleCellClick(index, subIndex)}\r\n        className={`cell ${board[index][subIndex] ? board[index][subIndex] : ''} ${status[index] !== null ? 'disabled' : ''}`}\r\n      >\r\n        {board[index][subIndex]}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const renderBoard = () => {\r\n    return board.map((subBoard, index) => (\r\n      <div\r\n        key={index}\r\n        className={`sub-board ${nextMove === index && status[index] === null ? 'active' : ''} ${status[index] ? status[index] : ''}`}\r\n      >\r\n        {subBoard.map((_, subIndex) => renderCell(index, subIndex))}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h1 className=\"title\">Super Tic-Tac-Toe</h1>\r\n      <div className=\"board\">\r\n        {renderBoard()}\r\n      </div>\r\n      <div className=\"current-player\">Current Player: {currentPlayer}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SuperTicTacToe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}